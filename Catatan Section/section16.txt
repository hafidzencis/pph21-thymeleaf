NoSQl adalah non relational database bisa disebut Database Manangement System (DBMS).DBMS
bersifat flexibel, melakukan penyimapanan data sementara, terdistribusi.ACID tid

syntaks mongo db

masuk ke bin lalu pilih mongo

->membuat db
use namadb

->melihat db
show dbs

->membuat collection
db.createcollection("namacollection")

->melihat collections
show collections

->menambah dokumentasi
db.namacolletions.insert({ nama:'hafidz',gender:'male',jurusan:'informatika'})
-banyak data
db.namacolletions.insert([{ nama:'febrian',gender:'male',jurusan:'matematika'},{
nama:'driana',gender:'female',jurusan:'statistika'}])

->mencari data 
db.namacollections.find()
db.namacollections.find().pretty()

->update data
- db.namacolletions.update({jurusan:'matematika'},{ nama:'jokowi',gender:'male',jurusan:'matematika'})
- db.Mahasiswa.update({nama:'jokowi'},{ $set :{ jurusan: 'kehutanan',age :50}})

->upsert(update and inset) 
apabila tidak terdapat data makan melakukan upsert
-db.mahasiswa.update({nama:'maaruf amin'},{nama:'maarufamin',gender:'male',jurusan:'ilmu alquran dan tafsir'},{upsert: true})

->remove data
db.collections.remove({nama:'jokowi'})


db.Operators.insert([{id:1, nama:"indosat"},{id:2, nama:"telkomsel"},{id:3, nama:"xl"},{id:4, nama:"tri"},{id:5,nama:"smartfren"}])

db.TypeProduct.insert([{id:1,nama:"paket kuota internet"},{id:2, nama:"pulsa"},{id:3, nama:"paket telepon dan sms"}])

db.Product.insert([{id:1, kode:"xl50gb", nama: "paket kuota internet xl 50gb",status:"Ada",TypeProduct:{id:1} , Operators:{id : 3}},
{id:2, kode:"xl30gb", nama: "paket kuota internet xl 30gb",status:"Ada",TypeProduct:{id:1} , Operators:{id : 3}}])

db.Product.insert([{id:3, kode:"indosat10.000", nama: "pulsa indosat 10.000",status:"Ada",TypeProduct:{id:2} , Operators:{id : 1}},
{id:4,kode:"indosat50.000", nama: "pulsa indosat 50.000",status:"Ada",TypeProduct:{id:2} , Operators:{id : 1}},
{id:5,kode:"indosat100.000", nama: "pulsa indosat 100.000",status:"Ada",TypeProduct:{id:2} , Operators:{id : 1}}])

db.Product.insert([{id:6, kode:"tri2jamdan500sms/30hari", nama: "tri 2jam dan 500 sms selama 30 hari",status:"Ada",TypeProduct:{id:3} , Operators:{id : 4}},
{id:7,kode:"tri4jamdan700sms/30hari", nama: "tri 4 jam dan 700 sms selama 30 hari",status:"Ada",TypeProduct:{id:3} , Operators:{id : 4}},
{id: 8,kode:"tri8jamdan1000sms/30hari", nama: "tri 8 jam dan 1000 sms selama 30 hari",status:"Ada",TypeProduct:{id:3} , Operators:{id : 4}}])


db.ProdDesc.insert([{id:1,description:"paket kuota internet xl 50gb selama 2 bulan",Product:{id:1}},
{id:2,description:"paket kuota internet internet xl 30 gb selama 1 bulan",Product:{id:2}},
{id:3,description:"pulsa indosat 10.000 masa aktif 10 hari",Product:{id:3}},
{id:4,description:"pulsa indosat 50.000 masa aktif 30 hari",Product:{id:4}},
{id:5,description:"pulsa indosat 100.000 masa aktif 60 hari",Product:{id:5}},
{id:6,description:"tri 2 jam telepon dan 500 sms selama 30 hari",Product:{id:6}},
{id:7,description:"tri 4 jam telepon dan 700 sms selama 30 hari",Product:{id:7}},
{id:8,description:"tri 8 jam telepon dan 1000 sms selama 30 hari",Product:{id:8}}])

db.PaymentMethods.insert([{id:1,nama:"bank"},{id:2,nama:"e-money"},{id:3,nama:"kredit"}])

db.User.insert([{id:1,nama:"jokowi",gender:"Laki-laki"},{id:2,nama:"puan maharani",gender:"Perempuan"},{id:3,nama:"sri mulyani",gender:"Perempuan"},{id:4,nama:"luhut binsar",gender:"Laki-laki"},{id:5,nama:"maaruf amin",gender:"Laki-laki"}])

db.Transactions.insert([{id:1,status:"belum dibayar",}])


db.Books.insert([{_id:1, title: "Wawasan Pancasila", authorID: 1, publisherID: 1, price: 71200, stats: {page: 324, weight: 300}, publishedAt: new Date("2018-10-01"), category: ["social", "politics"]},
{_id: 2, title: "Mata Air Keteladanan", authorID: 1, publisherID: 2, price: 106250, stats: {page: 672, weight: 650}, publishedAt: new Date("2017-09-01"), category: ["social", "politics"]}, 
{_id: 3, title: "Revolusi Pancasila", authorID: 1, publisherID: 1, price: 54400, stats: {page: 220, weight: 500}, publishedAt: new Date("2015-05-01"), category: ["social", "politics"]}, 
{_id: 4, title: "Self Driving", authorID: 2, publisherID: 1, price: 58650, stats:{page: 286, weight: 300}, publishedAt: new Date("2018-05-01"), category: ["self-development"]},
{_id: 5, title: "Self Disruption", authorID: 2, publisherID: 2, price: 83300, stats: {page: 400, weight: 800}, publishedAt: new Date("2018-05-01"), category: ["self-development"]}]) 

db.Authors.insert([{_id: 1, firstName:"Yudi", lastName: "Latif"},
{_id: 2, firstName:"Rhenald", lastName: "Kasali"}])

db.Publishers.insert([{_id:1, publisherName:"Expose"},
{_id:2, publisherName: "Mizan"}])


db.User.aggregate(
  [
    {
      $match: {
        gender:"perempuan"
      }
    },
    {
      $count: "passing_scores"
    }
  ]


1. db.Books.aggregate([ $match : {authorID : 1}, $unionWith : {coll : "Books", pipeline : [{$match ; { authorID: 2 }}] }]);

2. db.Books.find({authorID : 1}, {title : 1, price : 1});

3. db.Books.aggregate([{$match : {authorID : 2}}, {$group : {_id:"$authorID", totalPages : {$sum : "$stats.page"}}}])

4. db.Books.aggregate([{$lookup : {from : "books", localField:"_id",foreignField: "authorID",as : "books"}}])

5. db.Books.aggregate([{$lookup : {from: "Authors", localField: "authorID", foreignField : "_id", as : "authors"}}, {$lookup : {from: "Publishers", localField: "publisherID", foreignField : "_id", as : "Publishers"}}])

6. db.Authors.aggregate([{$lookup : { from: "Books", localField: "_id", foreignField : "authorID", as :"buku"}},{$unwind : "$buku"},{$group : {_id : {$concat : ["$firstName", " ","$lastName"]}, number_of_books:{$count : {}},list_of_books:{$count : {}} } }	]);

7. db.Books.find({},{_id: 1, title: 1, price:1, Promo: {$cond : {if :{$gte : ["$price",90000]},then : "3%",if : {$gte :["$price",60000]}, then : "2%", else : "1%" }}})






